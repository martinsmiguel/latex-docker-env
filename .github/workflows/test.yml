name: Test LaTeX Template CLI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Cache keys
  CACHE_VERSION: v1

jobs:
  # Job rápido para testes básicos (apenas com bash padrão)
  quick-test:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bats
          /usr/local/bin/bats
        key: ${{ runner.os }}-deps-${{ env.CACHE_VERSION }}-${{ hashFiles('.github/workflows/test.yml') }}
        restore-keys: |
          ${{ runner.os }}-deps-${{ env.CACHE_VERSION }}-

    - name: Install BATS (if not cached)
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y bats

    - name: Make scripts executable
      run: |
        chmod +x bin/latex-cli
        chmod +x tests/run_tests.sh
        find lib/ -name "*.sh" -exec chmod +x {} \;

    - name: Run unit tests
      run: |
        ./tests/run_tests.sh --unit

    - name: Run CLI syntax check
      run: |
        bash -n bin/latex-cli

    - name: Test CLI basic commands
      run: |
        ./bin/latex-cli --help
        ./bin/latex-cli version

  # Testes com múltiplas versões do bash (apenas essencial)
  bash-compatibility:
    runs-on: ubuntu-latest
    needs: quick-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      fail-fast: false
      matrix:
        bash-version: ["5.0", "5.1"]  # Removida versão 4.4 para acelerar

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bash ${{ matrix.bash-version }}
      if: matrix.bash-version != '5.1'
      run: |
        echo "Setting up Bash ${{ matrix.bash-version }} environment"
        # Configuração simplificada apenas para versões essenciais

    - name: Verify Bash version
      run: |
        echo "Bash version:"
        bash --version | head -1

    - name: Basic CLI test
      run: |
        chmod +x bin/latex-cli
        ./bin/latex-cli --version

  # Quality checks (executam em paralelo)
  quality-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run shellcheck on CLI
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: './bin'
        format: gcc
        additional_files: 'bin/latex-cli'

    - name: Check file permissions
      run: |
        # Verifica se arquivos executáveis têm permissão correta
        [ -x "bin/latex-cli" ] || exit 1
        find lib/ -name "*.sh" -exec test -x {} \; || exit 1

    - name: Check for secrets or sensitive data
      run: |
        # Procura por possíveis dados sensíveis
        ! grep -r "password\|secret\|token" . --exclude-dir=.git --exclude="*.md" --exclude-dir=.github || exit 1

    - name: Validate JSON files
      run: |
        # Valida arquivos JSON
        for json_file in $(find . -name "*.json" -not -path "./.git/*"); do
          echo "Validating $json_file"
          python3 -m json.tool "$json_file" > /dev/null || exit 1
        done

    - name: Check documentation
      run: |
        # Verifica se documentação principal existe
        [ -f "README.md" ] || exit 1
        [ -f "docs/CLI.md" ] || exit 1
        [ -f "docs/LICENSE" ] || exit 1
        grep -q "LaTeX" README.md || exit 1

  # Testes de integração (apenas em pushes para main/develop)
  integration-test:
    runs-on: ubuntu-latest
    needs: [quick-test]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bats
          /usr/local/bin/bats
        key: ${{ runner.os }}-deps-${{ env.CACHE_VERSION }}-${{ hashFiles('.github/workflows/test.yml') }}
        restore-keys: |
          ${{ runner.os }}-deps-${{ env.CACHE_VERSION }}-

    - name: Install BATS (if not cached)
      if: needs.quick-test.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y bats

    - name: Setup Docker with cache
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: image=moby/buildkit:buildx-stable-1

    - name: Make scripts executable
      run: |
        chmod +x bin/latex-cli
        chmod +x tests/run_tests.sh
        find lib/ -name "*.sh" -exec chmod +x {} \;

    - name: Test setup command (dry run)
      run: |
        # Testa setup sem Docker completo
        ./bin/latex-cli setup || echo "Setup test completed"

    - name: Run integration tests
      run: |
        ./tests/run_tests.sh --integration --verbose
      continue-on-error: true  # Integration tests podem falhar sem Docker completo
