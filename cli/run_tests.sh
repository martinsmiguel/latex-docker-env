#!/bin/bash

# Script para executar testes do CLI Go

set -e

echo "üß™ Executando Testes do CLI LaTeX Docker"
echo "========================================"

# Ir para o diret√≥rio do CLI
cd "$(dirname "$0")"

echo "üìÅ Diret√≥rio atual: $(pwd)"

# Verificar se estamos no diret√≥rio correto
if [[ ! -f "go.mod" ]]; then
    echo "‚ùå Erro: N√£o encontrado go.mod. Execute este script do diret√≥rio cli/"
    exit 1
fi

echo ""
echo "üîç Verificando depend√™ncias..."
go mod tidy

echo ""
echo "üèóÔ∏è  Compilando projeto..."
go build -o ltx ./main.go

echo ""
echo "üß™ Executando testes unit√°rios..."
echo "--------------------------------"

# Executar testes com verbose e coverage seguindo padr√µes do Go
echo "üìã Executando go test com race detection e coverage..."
go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

TEST_EXIT_CODE=$?

echo ""
echo "üìä Relat√≥rio de Cobertura:"
echo "-------------------------"
go tool cover -func=coverage.out

echo ""
echo "üìà Relat√≥rio de cobertura por pacote:"
echo "------------------------------------"
go tool cover -func=coverage.out | grep -E "(total:|statements)"

echo ""
echo "üìà Gerando relat√≥rio HTML de cobertura..."
go tool cover -html=coverage.out -o coverage.html
echo "üìÑ Relat√≥rio HTML salvo em: coverage.html"

echo ""
echo "üîç Executando go vet (an√°lise est√°tica)..."
go vet ./...
VET_EXIT_CODE=$?

echo ""
echo "üîß Executando golangci-lint..."
if command -v golangci-lint &> /dev/null; then
    golangci-lint run --config .golangci.yml
    LINT_EXIT_CODE=$?
else
    echo "‚ö†Ô∏è  golangci-lint n√£o encontrado."
    echo "   Instale com: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
    LINT_EXIT_CODE=0  # N√£o falhar se n√£o estiver instalado
fi

echo ""
echo "üßπ Verificando formata√ß√£o de c√≥digo..."
UNFORMATTED=$(gofmt -l .)
if [ -n "$UNFORMATTED" ]; then
    echo "‚ùå Arquivos n√£o formatados encontrados:"
    echo "$UNFORMATTED"
    echo "   Execute: go fmt ./..."
    GOFMT_EXIT_CODE=1
else
    echo "‚úÖ Todos os arquivos est√£o formatados corretamente"
    GOFMT_EXIT_CODE=0
fi

echo ""
echo "üîç Executando verifica√ß√µes adicionais..."

# Verificar se h√° imports n√£o utilizados
echo "üì¶ Verificando imports..."
if command -v goimports &> /dev/null; then
    UNORGANIZED=$(goimports -l .)
    if [ -n "$UNORGANIZED" ]; then
        echo "‚ö†Ô∏è  Imports desorganizados encontrados:"
        echo "$UNORGANIZED"
        echo "   Execute: goimports -w ."
    else
        echo "‚úÖ Imports organizados corretamente"
    fi
else
    echo "‚ö†Ô∏è  goimports n√£o encontrado. Instale com: go install golang.org/x/tools/cmd/goimports@latest"
fi

# Verificar depend√™ncias do m√≥dulo
echo "üìã Verificando depend√™ncias do m√≥dulo..."
go mod verify
MOD_EXIT_CODE=$?

echo ""
echo "üìã Resumo dos Testes:"
echo "--------------------"

# Calcular cobertura total
COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
echo "üìä Cobertura total: $COVERAGE"

# Status dos testes
if [ $TEST_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ Testes unit√°rios: PASSOU"
else
    echo "‚ùå Testes unit√°rios: FALHOU"
fi

if [ $VET_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ go vet: PASSOU"
else
    echo "‚ùå go vet: FALHOU"
fi

if [ $LINT_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ golangci-lint: PASSOU"
else
    echo "‚ùå golangci-lint: FALHOU"
fi

if [ $GOFMT_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ Formata√ß√£o: PASSOU"
else
    echo "‚ùå Formata√ß√£o: FALHOU"
fi

if [ $MOD_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ Verifica√ß√£o de m√≥dulo: PASSOU"
else
    echo "‚ùå Verifica√ß√£o de m√≥dulo: FALHOU"
fi

echo ""
echo "üìÑ Arquivos gerados:"
echo "  - coverage.out (perfil de cobertura)"
echo "  - coverage.html (relat√≥rio HTML)"

echo ""
echo "üöÄ Comandos √∫teis:"
echo "  - Visualizar cobertura: open coverage.html"
echo "  - Executar apenas um pacote: go test -v ./internal/commands"
echo "  - Executar apenas um teste: go test -v -run TestNomeDoTeste ./internal/commands"
echo "  - Benchmark: go test -bench=. ./..."

# Calcular c√≥digo de sa√≠da final
FINAL_EXIT_CODE=0
if [ $TEST_EXIT_CODE -ne 0 ] || [ $VET_EXIT_CODE -ne 0 ] || [ $LINT_EXIT_CODE -ne 0 ] || [ $GOFMT_EXIT_CODE -ne 0 ] || [ $MOD_EXIT_CODE -ne 0 ]; then
    FINAL_EXIT_CODE=1
fi

# Verificar se h√° testes falhando
if [ $FINAL_EXIT_CODE -eq 0 ]; then
    echo ""
    echo "üéâ Todos os testes e verifica√ß√µes passaram!"
    echo "‚ú® C√≥digo est√° seguindo os padr√µes do Go!"
    exit 0
else
    echo ""
    echo "üí• Algumas verifica√ß√µes falharam. Verifique a sa√≠da acima."
    echo "üîß Execute as corre√ß√µes sugeridas antes de fazer commit."
    exit 1
fi
